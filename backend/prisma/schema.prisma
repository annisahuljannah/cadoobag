// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ==================== AUTH & USER ====================

model Role {
  id    Int    @id @default(autoincrement())
  code  String @unique
  name  String
  users User[]
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  name         String?
  phone        String?
  roleId       Int
  role         Role      @relation(fields: [roleId], references: [id])
  addresses    Address[]
  orders       Order[]
  reviews      Review[]
  wishlists    Wishlist[]
  auditLogs    AuditLog[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Address {
  id            Int      @id @default(autoincrement())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  label         String
  receiver      String
  phone         String
  provinceId    Int
  provinceName  String
  cityId        Int
  cityName      String
  subdistrictId Int
  subdistrictName String
  postalCode    String
  detail        String
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orders        Order[]
}

// ==================== PRODUCTS ====================

model Category {
  id       Int               @id @default(autoincrement())
  slug     String            @unique
  name     String
  parentId Int?
  parent   Category?         @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[]        @relation("CategoryToCategory")
  products ProductCategory[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Product {
  id             Int               @id @default(autoincrement())
  slug           String            @unique
  name           String
  description    String?
  baseWeightGram Int               @default(500)
  brand          String?
  active         Boolean           @default(true)
  images         ProductImage[]
  variants       Variant[]
  reviews        Review[]
  categories     ProductCategory[]
  wishlists      Wishlist[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model ProductCategory {
  productId  Int
  categoryId Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  isPrimary Boolean @default(false)
  createdAt DateTime @default(now())
}

model Variant {
  id              Int        @id @default(autoincrement())
  productId       Int
  product         Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  sku             String     @unique
  color           String?
  size            String?
  price           Int
  compareAtPrice  Int?
  inventory       Inventory?
  cartItems       CartItem[]
  orderItems      OrderItem[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Inventory {
  id        Int      @id @default(autoincrement())
  variantId Int      @unique
  variant   Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  stock     Int      @default(0)
  reserved  Int      @default(0)
  updatedAt DateTime @updatedAt
}

// ==================== CART ====================

model Cart {
  id        String     @id @default(uuid())
  userId    String?
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variantId Int
  variant   Variant  @relation(fields: [variantId], references: [id])
  qty       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, variantId])
}

// ==================== ORDERS ====================

model Order {
  id           String      @id @default(uuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  addressId    Int
  address      Address     @relation(fields: [addressId], references: [id])
  status       String      @default("PENDING")
  subtotal     Int
  shippingCost Int
  discount     Int         @default(0)
  total        Int
  courier      String?
  service      String?
  waybill      String?
  voucherCode  String?
  voucher      Voucher?    @relation(fields: [voucherCode], references: [code])
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  items        OrderItem[]
  payments     Payment[]
  shipment     Shipment?
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  Int
  variantId  Int
  variant    Variant @relation(fields: [variantId], references: [id])
  name       String
  sku        String
  price      Int
  qty        Int
  weightGram Int
}

// ==================== PAYMENTS ====================

model Payment {
  id       String    @id @default(uuid())
  orderId  String
  order    Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  method   String
  channel  String?
  provider String?
  amount   Int
  status   String    @default("PENDING")
  refNo    String?   @unique
  vaNo     String?
  paidAt   DateTime?
  meta     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ==================== SHIPMENTS ====================

model Shipment {
  id       String           @id @default(uuid())
  orderId  String           @unique
  order    Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  courier  String
  service  String
  cost     Int
  etd      String?
  statuses ShipmentStatus[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model ShipmentStatus {
  id         Int      @id @default(autoincrement())
  shipmentId String
  shipment   Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  status     String
  note       String?
  createdAt  DateTime @default(now())
}

// ==================== VOUCHERS ====================

model Voucher {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  type      String
  value     Int
  minSpend  Int      @default(0)
  startAt   DateTime
  endAt     DateTime
  quota     Int
  used      Int      @default(0)
  active    Boolean  @default(true)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ==================== REVIEWS & WISHLIST ====================

model Review {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

// ==================== AUDIT ====================

model AuditLog {
  id        Int      @id @default(autoincrement())
  actorId   String?
  actor     User?    @relation(fields: [actorId], references: [id])
  action    String
  entity    String
  entityId  String
  diff      String?
  createdAt DateTime @default(now())
}
